name: Release
on:
  push:
    tags:
      - 'v*'
env:
  CARGO_TERM_COLOR: always
jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Nécessaire pour créer une release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Extract tag name
        id: extract_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1  # Action plus moderne et fiable
        with:
          tag_name: ${{ steps.extract_tag.outputs.TAG_NAME }}
          release_name: Release ${{ steps.extract_tag.outputs.TAG_NAME }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-crates-io-rust-libs:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build
        run: cargo build --workspace --release

      - name: Login to crates.io
        run: cargo login $CRATE_IO_TOKEN
        env:
          CRATE_IO_TOKEN: ${{ secrets.CRATE_IO_TOKEN }}

          # Publier chaque crate avec dry-run d'abord, puis publication réelle si dry-run réussit
      - name: Publish gfs_lib_terms_proc_macro to crates.io
        run: |
          echo "Running dry-run for gfs_lib_terms_proc_macro..."
          if cargo publish -p gfs_lib_terms_proc_macro --dry-run; then
            echo "Dry-run successful, publishing for real..."
            cargo publish -p gfs_lib_terms_proc_macro
          else
            echo "Dry-run failed, skipping publication of gfs_lib_terms_proc_macro"
          fi

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_types to crates.io
        run: |
          echo "Running dry-run for gfs_lib_types..."
          if cargo publish -p gfs_lib_types --dry-run; then
            echo "Dry-run successful, publishing for real..."
            cargo publish -p gfs_lib_types
          else
            echo "Dry-run failed, skipping publication of gfs_lib_types"
          fi

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_terms to crates.io
        run: |
          echo "Running dry-run for gfs_lib_terms..."
          if cargo publish -p gfs_lib_terms --dry-run; then
            echo "Dry-run successful, publishing for real..."
            cargo publish -p gfs_lib_terms
          else
            echo "Dry-run failed, skipping publication of gfs_lib_terms"
          fi

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_contract to crates.io
        run: |
          echo "Running dry-run for gfs_lib_contract..."
          if cargo publish -p gfs_lib_contract --dry-run; then
            echo "Dry-run successful, publishing for real..."
            cargo publish -p gfs_lib_contract
          else
            echo "Dry-run failed, skipping publication of gfs_lib_contract"
          fi

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_portfolio to crates.io
        run: |
          echo "Running dry-run for gfs_lib_portfolio..."
          if cargo publish -p gfs_lib_portfolio --dry-run; then
            echo "Dry-run successful, publishing for real..."
            cargo publish -p gfs_lib_portfolio
          else
            echo "Dry-run failed, skipping publication of gfs_lib_portfolio"
          fi

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_simulation to crates.io
        run: |
          echo "Running dry-run for gfs_lib_simulation..."
          if cargo publish -p gfs_lib_simulation --dry-run; then
            echo "Dry-run successful, publishing for real..."
            cargo publish -p gfs_lib_simulation
          else
            echo "Dry-run failed, skipping publication of gfs_lib_simulation"
          fi