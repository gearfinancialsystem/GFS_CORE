name: Release
on:
  push:
    tags:
      - 'v*'
env:
  CARGO_TERM_COLOR: always
jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Nécessaire pour créer une release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Extract tag name
        id: extract_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1  # Action plus moderne et fiable
        with:
          tag_name: ${{ steps.extract_tag.outputs.TAG_NAME }}
          release_name: Release ${{ steps.extract_tag.outputs.TAG_NAME }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-crates-io-rust-libs:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build
        run: cargo build --workspace --release

      - name: Login to crates.io
        run: cargo login $CRATE_IO_TOKEN
        env:
          CRATE_IO_TOKEN: ${{ secrets.CRATE_IO_TOKEN }}

      # Fonction pour vérifier si une version existe déjà sur crates.io
      - name: Check if version exists on crates.io
        id: check_version
        run: |
          check_version_exists() {
            local package=$1
            # Extract the version from Cargo.toml. This assumes the package version in the manifest is the one you want to publish.
            local version=$(cargo metadata --format-version=1 --no-deps | jq -r ".packages[] | select(.name == \"$package\") | .version")
            echo "Checking for $package version $version on crates.io..."

            # Make the API request and check the HTTP status code
            if http_status=$(curl -s -o /dev/null -w "%{http_code}" "https://crates.io/api/v1/crates/$package/$version"); then
              if [[ "$http_status" == "200" ]]; then
                echo "Version $version of $package exists on crates.io."
                return 0
              elif [[ "$http_status" == "404" ]]; then
                echo "Version $version of $package does not exist on crates.io."
                return 1
              else
                echo "Unexpected HTTP status from crates.io: $http_status"
                return 2
              fi
            else
              echo "Error: curl command failed."
              return 3
            fi
          }

          # Check each package and set an output for it
          packages=("gfs_lib_terms_proc_macro" "gfs_lib_types" "gfs_lib_terms" "gfs_lib_contract" "gfs_lib_portfolio" "gfs_lib_simulation")

          for package in "${packages[@]}"; do
            if check_version_exists "$package"; then
              echo "$package=exists" >> $GITHUB_OUTPUT
            else
              echo "$package=not_exists" >> $GITHUB_OUTPUT
            fi
          done

      # Publier chaque crate uniquement si la version n'existe pas
      - name: Publish gfs_lib_terms_proc_macro to crates.io
        if: steps.check_version.outputs.gfs_lib_terms_proc_macro == 'not_exists'
        run: cargo publish -p gfs_lib_terms_proc_macro

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_types to crates.io
        if: steps.check_version.outputs.gfs_lib_terms_types== 'not_exists'
        run: cargo publish -p gfs_lib_terms_types

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_terms to crates.io
        if: steps.check_version.outputs.gfs_lib_terms== 'not_exists'
        run: cargo publish -p gfs_lib_terms

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_contract to crates.io
        if: steps.check_contract.outputs.gfs_lib_contract== 'not_exists'
        run: cargo publish -p gfs_lib_contract

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_portfolio to crates.io
        if: steps.check_portfolio.outputs.gfs_lib_portfolio== 'not_exists'
        run: cargo publish -p gfs_lib_portfolio

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_simulation to crates.io
        if: steps.check_simulation.outputs.gfs_lib_simulation== 'not_exists'
        run: cargo publish -p gfs_lib_simulation


