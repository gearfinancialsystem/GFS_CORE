name: Release
on:
  push:
    tags:
      - 'v*'
env:
  CARGO_TERM_COLOR: always
jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Nécessaire pour créer une release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Extract tag name
        id: extract_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1  # Action plus moderne et fiable
        with:
          tag_name: ${{ steps.extract_tag.outputs.TAG_NAME }}
          release_name: Release ${{ steps.extract_tag.outputs.TAG_NAME }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-crates-io-rust-libs:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build
        run: cargo build --workspace --release

      - name: Login to crates.io
        run: cargo login $CRATE_IO_TOKEN
        env:
          CRATE_IO_TOKEN: ${{ secrets.CRATE_IO_TOKEN }}

      # Fonction pour vérifier si une version existe déjà sur crates.io
      - name: Check if version exists on crates.io
        id: check_version
        run: |
          # Fonction pour vérifier si une version existe déjà
          check_version_exists() {
            local package=$1
            local version=$(cargo pkgid -p $package | cut -d# -f2)
            local response=$(curl -s "https://crates.io/api/v1/crates/$package/$version")
            if [[ "$response" == *"\"errors\":"* ]]; then
              echo "Version $version de $package n'existe pas encore sur crates.io."
              return 1
            else
              echo "Version $version de $package existe déjà sur crates.io."
              return 0
            fi
          }
          
          # Exporter la fonction pour les étapes suivantes
          echo "check_version_exists=$check_version_exists" >> $GITHUB_ENV

      # Publier chaque crate uniquement si la version n'existe pas
      - name: Publish gfs_lib_terms_proc_macro to crates.io
        if: steps.check_version.outputs.gfs_lib_terms_proc_macro != 'exists'
        run: |
          if ! check_version_exists gfs_lib_terms_proc_macro; then
            cargo publish -p gfs_lib_terms_proc_macro
          else
            echo "Version déjà existante, publication ignorée."
          fi

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_types to crates.io
        run: |
          if ! check_version_exists gfs_lib_types; then
            cargo publish -p gfs_lib_types
          else
            echo "Version déjà existante, publication ignorée."
          fi

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_terms to crates.io
        run: |
          if ! check_version_exists gfs_lib_terms; then
            cargo publish -p gfs_lib_terms
          else
            echo "Version déjà existante, publication ignorée."
          fi

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_contract to crates.io
        run: |
          if ! check_version_exists gfs_lib_contract; then
            cargo publish -p gfs_lib_contract
          else
            echo "Version déjà existante, publication ignorée."
          fi

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_portfolio to crates.io
        run: |
          if ! check_version_exists gfs_lib_portfolio; then
            cargo publish -p gfs_lib_portfolio
          else
            echo "Version déjà existante, publication ignorée."
          fi

      - name: Wait for index update
        run: sleep 15

      - name: Publish gfs_lib_simulation to crates.io
        run: |
          if ! check_version_exists gfs_lib_simulation; then
            cargo publish -p gfs_lib_simulation
          else
            echo "Version déjà existante, publication ignorée."
          fi


