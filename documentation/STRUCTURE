- CHAQUE 'TERM' appartient a un groupe tel que defini dans la norme
- Chaque 'TERM' est definie par un Struct enveloppante ; evitant que les termes soient definies seulement par des types
    primitifs qui creent de lambiguite
- CHAQUE 'TERM' doit venir avec un certain nombre de methodes, definis dans un trait
- Comme il y a beaucoup de termes, et beaucoup avec une structure similaire, les macros suivantes sont utilisees pour
    generer le code :
    - macro_struct_f64              pour representer les struct du type MaStruct(f64)
        f64 peut venir avec des conditions de validite et/ou des valeurs par default
    - macro_struct_isocycle         pour representer les struct du type MaStruct(IsoCycle)
    - macro_struct_isodatetime      pour representer les struct du type MaStruct(IsoDatetime)
    - macro_struct_isoperiod        pour representer les struct du type MaStruct(IsoPeriod)
    - macro_struct_vec_isodatetime
    - macro_struct_vec_isocycle
    - macro_struct_vec_f64

il faut implemter le trait Display pour pouvoir utiliser to_string


dans les fichiers de tests, tous ce qui commence par Array ou tout ce qui est cense etre un
array doit etre saisi comme tel, exemple :
"arrayCycleAnchorDateOfInterestPayment": "2021-01-01T00:00:00",
doit etre ecrit : "arrayCycleAnchorDateOfInterestPayment": ["2021-01-01T00:00:00"],

"creditEventTypeCovered": "DF", doit etre ecrit "creditEventTypeCovered": ["DF"],

pour eviter toute ambiguite quant au type

A FAIRE :
les supertraits : faire en sorte que TraitisodateTime soit un supertrait de Partialeq, clone, debug ect
et n'appeler que Traitisodatetime
