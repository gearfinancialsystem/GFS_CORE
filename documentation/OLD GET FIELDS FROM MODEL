  pub fn get_field(&self, field_name: &str) -> Option<FieldValue> {
        match field_name {
            "accrued_interest" => Some(FieldValue::vF64(self.accrued_interest?)),
            "accrued_interest2" => Some(FieldValue::vF64(self.accrued_interest2.clone().unwrap())),
            "amortization_date" => Some(FieldValue::vIsoDatetime(self.amortization_date.clone().unwrap())),
            "array_cycle_anchor_date_of_interest_payment" => Some(FieldValue::vVecIsoDatetime(self.array_cycle_anchor_date_of_interest_payment.clone().unwrap())),
            "array_cycle_anchor_date_of_principal_redemption" => Some(FieldValue::vVecIsoDatetime(self.array_cycle_anchor_date_of_principal_redemption.clone().unwrap())),
            "array_cycle_anchor_date_of_rate_reset" => Some(FieldValue::vVecIsoDatetime(self.array_cycle_anchor_date_of_rate_reset.clone().unwrap())),
            "array_cycle_of_interest_payment" => Some(FieldValue::vVecString(self.array_cycle_of_interest_payment.clone().unwrap())),
            "array_cycle_of_principal_redemption" => Some(FieldValue::vVecString(self.array_cycle_of_principal_redemption.clone().unwrap())),
            "array_cycle_of_rate_reset" => Some(FieldValue::vVecString(self.array_cycle_of_rate_reset.clone().unwrap())),
            "array_fixed_variable" => Some(FieldValue::vArrayFixedVariable(self.array_fixed_variable.clone().unwrap())),
            "array_increase_decrease" => Some(FieldValue::vArrayIncreaseDecrease(self.array_increase_decrease.clone().unwrap())),
            "array_next_principal_redemption_payment" => Some(FieldValue::vVecF64(self.array_next_principal_redemption_payment.clone().unwrap())),
            "array_rate" => Some(FieldValue::vVecF64(self.array_rate.clone().unwrap())),
            "boundary_crossed_flag" => Some(FieldValue::vBool(self.boundary_crossed_flag.clone().unwrap())),
            "boundary_direction" => Some(FieldValue::vBoundaryDirection(self.boundary_direction.clone().unwrap())),
            "boundary_effect" => Some(FieldValue::vBoundaryEffect(self.boundary_effect.clone().unwrap())),
            "boundary_leg_initially_active" => Some(FieldValue::vBoundaryLegInitiallyActive(self.boundary_leg_initially_active.clone().unwrap())),
            "boundary_monitoring_anchor_date" => Some(FieldValue::vIsoDatetime(self.boundary_monitoring_anchor_date.clone().unwrap())),
            "boundary_monitoring_cycle" => Some(FieldValue::Vstring(self.boundary_monitoring_cycle.clone().unwrap())),
            "boundary_monitoring_end_date" => Some(FieldValue::vIsoDatetime(self.boundary_monitoring_end_date.clone().unwrap())),
            "boundary_value" => Some(FieldValue::vF64(self.boundary_value.clone().unwrap())),
            "business_day_adjuster" => Some(FieldValue::vBusinessDayAdjuster(self.business_day_adjuster.clone().unwrap())),
            "calendar" => Some(FieldValue::vCalendar(self.calendar.clone().unwrap())),
            "capitalization_end_date" => Some(FieldValue::vIsoDatetime(self.capitalization_end_date?)),
            "contract_id" => Some(FieldValue::Vstring(self.contract_id.clone().unwrap())),
            "contract_performance" => Some(FieldValue::vContractPerformance(self.contract_performance?)),
            "contract_role" => Some(FieldValue::vContractRole(self.contract_role.clone().unwrap())),
            "contract_type" => Some(FieldValue::Vstring(self.contract_type.clone())),
            "counterparty_id" => Some(FieldValue::Vstring(self.counterparty_id.clone().unwrap())),
            "coverage_of_credit_enhancement" => Some(FieldValue::vF64(self.coverage_of_credit_enhancement.clone().unwrap())),
            "creator_id" => Some(FieldValue::Vstring(self.creator_id.clone().unwrap())),
            "credit_event_type_covered" => Some(FieldValue::vVecCreditEventTypeCovered(self.credit_event_type_covered.clone().unwrap())),
            "currency" => Some(FieldValue::Vstring(self.currency.clone().unwrap())),
            "currency2" => Some(FieldValue::Vstring(self.currency2.clone().unwrap())),
            "cycle_anchor_date_of_dividend" => Some(FieldValue::vIsoDatetime(self.cycle_anchor_date_of_dividend?)),
            "cycle_anchor_date_of_dividend_payment" => Some(FieldValue::vIsoDatetime(self.cycle_anchor_date_of_dividend_payment.clone().unwrap())),
            "cycle_anchor_date_of_fee" => Some(FieldValue::vIsoDatetime(self.cycle_anchor_date_of_fee?)),
            "cycle_anchor_date_of_interest_calculation_base" => Some(FieldValue::vIsoDatetime(self.cycle_anchor_date_of_interest_calculation_base.clone().unwrap())),
            "cycle_anchor_date_of_interest_payment" => Some(FieldValue::vIsoDatetime(self.cycle_anchor_date_of_interest_payment?)),
            "cycle_anchor_date_of_optionality" => Some(FieldValue::vIsoDatetime(self.cycle_anchor_date_of_optionality?)),
            "cycle_anchor_date_of_principal_redemption" => Some(FieldValue::vIsoDatetime(self.cycle_anchor_date_of_principal_redemption.clone().unwrap())),
            "cycle_anchor_date_of_rate_reset" => Some(FieldValue::vIsoDatetime(self.cycle_anchor_date_of_rate_reset?)),
            "cycle_anchor_date_of_scaling_index" => Some(FieldValue::vIsoDatetime(self.cycle_anchor_date_of_scaling_index?)),
            "cycle_of_dividend" => Some(FieldValue::Vstring(self.cycle_of_dividend.clone().unwrap())),
            "cycle_of_dividend_payment" => Some(FieldValue::Vstring(self.cycle_of_dividend_payment.clone().unwrap())),
            "cycle_of_fee" => Some(FieldValue::Vstring(self.cycle_of_fee.clone().unwrap())),
            "cycle_of_interest_calculation_base" => Some(FieldValue::Vstring(self.cycle_of_interest_calculation_base.clone().unwrap())),
            "cycle_of_interest_payment" => Some(FieldValue::Vstring(self.cycle_of_interest_payment.clone().unwrap())),
            "cycle_of_optionality" => Some(FieldValue::Vstring(self.cycle_of_optionality.clone().unwrap())),
            "cycle_of_principal_redemption" => Some(FieldValue::Vstring(self.cycle_of_principal_redemption.clone().unwrap())),
            "cycle_of_rate_reset" => Some(FieldValue::Vstring(self.cycle_of_rate_reset.clone().unwrap())),
            "cycle_of_scaling_index" => Some(FieldValue::Vstring(self.cycle_of_scaling_index.clone().unwrap())),
            "cycle_point_of_interest_payment" => Some(FieldValue::vCyclePointOfInterestPayment(self.cycle_point_of_interest_payment.clone().unwrap())),
            "cycle_point_of_rate_reset" => Some(FieldValue::vCyclePointOfRateReset(self.cycle_point_of_rate_reset.clone().unwrap())),
            "day_count_convention" => Some(FieldValue::vDayCountConvention(self.day_count_convention.clone().unwrap())),
            "delinquency_period" => Some(FieldValue::vIsoPeriod(self.delinquency_period.clone().unwrap())),
            "delinquency_rate" => Some(FieldValue::vF64(self.delinquency_rate.clone().unwrap())),
            "delivery_settlement" => Some(FieldValue::vDeliverySettlement(self.delivery_settlement.clone().unwrap())),
            "exercise_amount" => Some(FieldValue::vF64(self.exercise_amount.clone().unwrap())),
            "exercise_date" => Some(FieldValue::vIsoDatetime(self.exercise_date.clone().unwrap())),
            "ex_dividend_date" => Some(FieldValue::vIsoDatetime(self.ex_dividend_date.clone().unwrap())),
            "fee_accrued" => Some(FieldValue::vF64(self.fee_accrued?)),
            "fee_basis" => Some(FieldValue::vFeeBasis(self.fee_basis.clone().unwrap())),
            "fee_rate" => Some(FieldValue::vF64(self.fee_rate?)),
            "fixing_period" => Some(FieldValue::vIsoPeriod(self.fixing_period.clone().unwrap())),
            "futures_price" => Some(FieldValue::vF64(self.futures_price.clone().unwrap())),
            "guaranteed_exposure" => Some(FieldValue::vGuaranteedExposure(self.guaranteed_exposure.clone().unwrap())),
            "grace_period" => Some(FieldValue::vIsoPeriod(self.grace_period.clone().unwrap())),
            "interest_calculation_base" => Some(FieldValue::vInterestCalculationBase(self.interest_calculation_base.clone().unwrap())),
            "interest_calculation_base_amount" => Some(FieldValue::vF64(self.interest_calculation_base_amount.clone().unwrap())),
            "interest_scaling_multiplier" => Some(FieldValue::vF64(self.interest_scaling_multiplier?)),
            "initial_exchange_date" => Some(FieldValue::vIsoDatetime(self.initial_exchange_date?)),
            "life_cap" => Some(FieldValue::vF64(self.life_cap?)),
            "life_floor" => Some(FieldValue::vF64(self.life_floor?)),
            "market_object_code" => Some(FieldValue::Vstring(self.market_object_code.clone().unwrap())),
            "market_object_code_of_dividends" => Some(FieldValue::Vstring(self.market_object_code_of_dividends.clone().unwrap())),
            "market_object_code_of_rate_reset" => Some(FieldValue::Vstring(self.market_object_code_of_rate_reset.clone().unwrap())),
            "market_object_code_of_scaling_index" => Some(FieldValue::Vstring(self.market_object_code_of_scaling_index.clone().unwrap())),
            "market_value_observed" => Some(FieldValue::vF64(self.market_value_observed.clone().unwrap())),
            "maturity_date" => Some(FieldValue::vMaturityDate(self.maturity_date.clone().unwrap())),
            "next_dividend_payment_amount" => Some(FieldValue::vF64(self.next_dividend_payment_amount.clone().unwrap())),
            "next_principal_redemption_payment" => Some(FieldValue::vF64(self.next_principal_redemption_payment.clone().unwrap())),
            "next_reset_rate" => Some(FieldValue::vF64(self.next_reset_rate?)),
            "nominal_interest_rate" => Some(FieldValue::vF64(self.nominal_interest_rate?)),
            "nominal_interest_rate2" => Some(FieldValue::vF64(self.nominal_interest_rate2.clone().unwrap())),
            "non_performing_date" => Some(FieldValue::vIsoDatetime(self.non_performing_date.clone().unwrap())),
            "notional_principal" => Some(FieldValue::vF64(self.notional_principal?)),
            "notional_principal2" => Some(FieldValue::vF64(self.notional_principal2.clone().unwrap())),
            "notional_scaling_multiplier" => Some(FieldValue::vF64(self.notional_scaling_multiplier?)),
            "object_code_of_prepayment_model" => Some(FieldValue::Vstring(self.object_code_of_prepayment_model.clone().unwrap())),
            "option_strike1" => Some(FieldValue::vF64(self.option_strike1.clone().unwrap())),
            "option_strike2" => Some(FieldValue::vF64(self.option_strike2.clone().unwrap())),
            "option_type" => Some(FieldValue::vOptionType(self.option_type.clone().unwrap())),
            "penalty_rate" => Some(FieldValue::vF64(self.penalty_rate?)),
            "penalty_type" => Some(FieldValue::vPenaltyType(self.penalty_type.clone().unwrap())),
            "prepayment_period" => Some(FieldValue::vIsoPeriod(self.prepayment_period.clone().unwrap())),
            "premium_discount_at_ied" => Some(FieldValue::vF64(self.premium_discount_at_ied?)),
            "price_at_purchase_date" => Some(FieldValue::vF64(self.price_at_purchase_date?)),
            "price_at_termination_date" => Some(FieldValue::vF64(self.price_at_termination_date?)),
            "purchase_date" => Some(FieldValue::vIsoDatetime(self.purchase_date?)),
            "quantity" => Some(FieldValue::vF64(self.quantity.clone().unwrap())),
            "rate_multiplier" => Some(FieldValue::vF64(self.rate_multiplier?)),
            "rate_spread" => Some(FieldValue::vF64(self.rate_spread?)),
            "scaling_effect" => Some(FieldValue::vScalingEffect(self.scaling_effect.clone().unwrap())),
            "scaling_index_at_contract_deal_date" => Some(FieldValue::vF64(self.scaling_index_at_contract_deal_date?)),
            "seniority" => Some(FieldValue::vSeniority(self.seniority.clone().unwrap())),
            "settlement_currency" => Some(FieldValue::Vstring(self.settlement_currency.clone().unwrap())),
            "settlement_period" => Some(FieldValue::vIsoPeriod(self.settlement_period.clone().unwrap())),
            "status_date" => Some(FieldValue::vIsoDatetime(self.status_date?)),
            "termination_date" => Some(FieldValue::vIsoDatetime(self.termination_date?)),
            "x_day_notice" => Some(FieldValue::vIsoPeriod(self.x_day_notice.clone().unwrap())),
            _ => None,
        }
    }