jai converti ce code jave en rust de la facon suivate :
code java :
/*
 * Copyright (C) 2016 - present by ACTUS Financial Research Foundation
 *
 * Please see distribution for license.
 */
package org.actus.contracts;

import org.actus.AttributeConversionException;
import org.actus.attributes.ContractModelProvider;
import org.actus.conventions.businessday.BusinessDayAdjuster;
import org.actus.conventions.daycount.DayCountCalculator;
import org.actus.externals.RiskFactorModelProvider;
import org.actus.events.ContractEvent;
import org.actus.states.StateSpace;
import org.actus.events.EventFactory;
import org.actus.time.ScheduleFactory;
import org.actus.conventions.contractrole.ContractRoleConvention;
import org.actus.types.EventType;
import org.actus.util.CommonUtils;
import org.actus.functions.pam.*;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Represents the Principal At Maturity payoff algorithm
 *
 * @see <a href="https://www.actusfrf.org"></a>
 */
public final class PrincipalAtMaturity {

    // compute next events within period
    public static ArrayList<ContractEvent> schedule(LocalDateTime to,
                                                    ContractModelProvider model) throws AttributeConversionException {
        ArrayList<ContractEvent> events = new ArrayList<ContractEvent>();

        // initial exchange
        events.add(EventFactory.createEvent(
            model.getAs("initialExchangeDate"),
            EventType.IED,
            model.getAs("currency"),
            new POF_IED_PAM(),
            new STF_IED_PAM(),
            model.getAs("contractID")
            ));
        // principal redemption
        events.add(EventFactory.createEvent(
            model.getAs("maturityDate"),
            EventType.MD,
            model.getAs("currency"),
            new POF_MD_PAM(),
            new STF_MD_PAM(),
            model.getAs("contractID")
            ));

        // purchase
        if (!CommonUtils.isNull(model.getAs("purchaseDate"))) {
            events.add(EventFactory.createEvent(model.getAs("purchaseDate"), EventType.PRD, model.getAs("currency"), new POF_PRD_PAM(), new STF_PRD_PAM(), model.getAs("contractID")));
        }
        // interest payment related
        if (!CommonUtils.isNull(model.getAs("nominalInterestRate")) &&
        (!CommonUtils.isNull(model.getAs("cycleOfInterestPayment")) ||
        !CommonUtils.isNull(model.getAs("cycleAnchorDateOfInterestPayment")))) {
            // raw interest payment events
            Set<ContractEvent> interestEvents = EventFactory.createEvents(
                    ScheduleFactory.createSchedule(
                            model.getAs("cycleAnchorDateOfInterestPayment"),
                            model.getAs("maturityDate"),
                            model.getAs("cycleOfInterestPayment"),
                            model.getAs("endOfMonthConvention"),
                            true
                    ),
                    EventType.IP,
                    model.getAs("currency"),
                    new POF_IP_PAM(),
                    new STF_IP_PAM(),
                    model.getAs("businessDayConvention"),
                    model.getAs("contractID")
            );
            // adapt if interest capitalization set
            if (!CommonUtils.isNull(model.getAs("capitalizationEndDate"))) {
                // remove IP and add capitalization event at IPCED instead
                ContractEvent capitalizationEnd = EventFactory.createEvent(model.getAs("capitalizationEndDate"),
                                                        EventType.IPCI,
                                                        model.getAs("currency"),
                                                        new POF_IPCI_PAM(), new STF_IPCI_PAM(),
                                                        model.getAs("businessDayConvention"),
                                                        model.getAs("contractID"));
                interestEvents.removeIf(e -> e.eventType().equals(EventType.IP) && e.compareTo(capitalizationEnd) == 0);
                interestEvents.add(capitalizationEnd);

                // for all events with time <= IPCED && type == "IP" do
                // change type to IPCI and payoff/state-trans functions
                interestEvents.forEach(e -> {
                    if (e.eventType().equals(EventType.IP) && e.compareTo(capitalizationEnd) != 1) {
                        e.eventType(EventType.IPCI);
                        e.fPayOff(new POF_IPCI_PAM());
                        e.fStateTrans(new STF_IPCI_PAM());
                    }
                });
            }
            events.addAll(interestEvents);

        }else if(!CommonUtils.isNull(model.getAs("capitalizationEndDate"))) {
            // if no extra interest schedule set but capitalization end date, add single IPCI event
            events.add(EventFactory.createEvent(
                    model.getAs("capitalizationEndDate"),
                    EventType.IPCI,
                    model.getAs("currency"),
                    new POF_IPCI_PAM(),
                    new STF_IPCI_PAM(),
                    model.getAs("businessDayConvention"),
                    model.getAs("contractID")
            ));
        }
        // rate reset
        Set<ContractEvent> rateResetEvents = EventFactory.createEvents(
                ScheduleFactory.createSchedule(
                        model.<LocalDateTime>getAs("cycleAnchorDateOfRateReset"),
                        model.getAs("maturityDate"),
                        model.getAs("cycleOfRateReset"),
                        model.getAs("endOfMonthConvention"),
                        false
                ),
                EventType.RR,
                model.getAs("currency"),
                new POF_RR_PAM(),
                new STF_RR_PAM(),
                model.getAs("businessDayConvention"),
                model.getAs("contractID")
        );

        // adapt fixed rate reset event
        if(!CommonUtils.isNull(model.getAs("nextResetRate"))) {
            ContractEvent fixedEvent =
                rateResetEvents.stream().sorted()
                .filter(
                    e -> e.compareTo(EventFactory.createEvent(
                        model.getAs("statusDate"),
                        EventType.AD,
                        model.getAs("currency"),
                        null,
                        null,
                        model.getAs("contractID"))) == 1).findFirst().get();

            fixedEvent.fStateTrans(new STF_RRF_PAM());
            fixedEvent.eventType(EventType.RRF);
            rateResetEvents.add(fixedEvent);
        }

        // add all rate reset events
        events.addAll(rateResetEvents);

        // fees (if specified)
        if (!CommonUtils.isNull(model.getAs("cycleOfFee"))) {
        events.addAll(EventFactory.createEvents(
                ScheduleFactory.createSchedule(
                        model.getAs("cycleAnchorDateOfFee"),
                        model.getAs("maturityDate"),
                        model.getAs("cycleOfFee"),
                        model.getAs("endOfMonthConvention"),
                        true
                ),
                EventType.FP,
                model.getAs("currency"),
                new POF_FP_PAM(),
                new STF_FP_PAM(),
                model.getAs("businessDayConvention"),
                model.getAs("contractID")
        ));
        }
        // scaling (if specified)
        String scalingEffect = model.getAs("scalingEffect").toString();
        if (!CommonUtils.isNull(scalingEffect) &&
        (scalingEffect.contains("I") || scalingEffect.contains("N"))) {
        events.addAll(EventFactory.createEvents(
                ScheduleFactory.createSchedule(
                        model.getAs("cycleAnchorDateOfScalingIndex"),
                        model.getAs("maturityDate"),
                        model.getAs("cycleOfScalingIndex"),
                        model.getAs("endOfMonthConvention"),
                        false
                ),
                EventType.SC,
                model.getAs("currency"),
                new POF_SC_PAM(),
                new STF_SC_PAM(),
                model.getAs("businessDayConvention"),
                model.getAs("contractID")
        ));
        }
        // termination
        if (!CommonUtils.isNull(model.getAs("terminationDate"))) {
            ContractEvent termination = EventFactory.createEvent(
                    model.getAs("terminationDate"),
                    EventType.TD,
                    model.getAs("currency"),
                    new POF_TD_PAM(),
                    new STF_TD_PAM(),
                    model.getAs("contractID")
            );
            events.removeIf(e -> e.compareTo(termination) == 1); // remove all post-termination events
            events.add(termination);
        }
        // remove all pre-status date events
        events.removeIf(e -> e.compareTo(
            EventFactory.createEvent(
                model.getAs("statusDate"),
                 EventType.AD,
                  model.getAs("currency"),
                   null,
                   null,
                    model.getAs("contractID"))) == -1);

        // remove all post to-date events
        events.removeIf(e -> e.compareTo(
            EventFactory.createEvent(
                to,
                EventType.AD,
                model.getAs("currency"),
                 null,
                 null,
                  model.getAs("contractID"))) == 1);

        // sort the events in the payoff-list according to their time of occurence
        Collections.sort(events);

        return events;
    }

    // apply a set of events to the current state of a contract and return the post events state
    public static ArrayList<ContractEvent> apply(ArrayList<ContractEvent> events,
                                                 ContractModelProvider model,
                                                 RiskFactorModelProvider observer) throws AttributeConversionException {

        // initialize state space per status date
        StateSpace states = initStateSpace(model);

        // sort the events according to their time sequence
        Collections.sort(events);

        // apply events according to their time sequence to current state
        events.forEach(e -> e.eval(states, model, observer, model.getAs("dayCountConvention"), model.getAs("businessDayConvention")));
        // remove pre-purchase events if purchase date set
        if(!CommonUtils.isNull(model.getAs("purchaseDate"))) {
            events.removeIf(e -> !e.eventType().equals(EventType.AD) && e.compareTo(EventFactory.createEvent(
                model.getAs("purchaseDate"),
                EventType.PRD,
                model.getAs("currency"),
                null,
                null,
                model.getAs("contractID"))
                ) == -1);
        }
        // return evaluated events
        return events;
    }

    private static StateSpace initStateSpace(ContractModelProvider model) throws AttributeConversionException {
        StateSpace states = new StateSpace();
        states.notionalScalingMultiplier = model.getAs("notionalScalingMultiplier");
        states.interestScalingMultiplier = model.getAs("interestScalingMultiplier");

        states.contractPerformance = model.getAs("contractPerformance");
        states.statusDate = model.getAs("statusDate");

        if(model.<LocalDateTime>getAs("initialExchangeDate").isAfter(model.getAs("statusDate"))){
            states.notionalPrincipal = 0.0;
            states.nominalInterestRate = 0.0;
        }else{
            states.notionalPrincipal = ContractRoleConvention.roleSign(model.getAs("contractRole"))*model.<Double>getAs("notionalPrincipal");
            states.nominalInterestRate = model.getAs("nominalInterestRate");
        }

        if(CommonUtils.isNull(model.getAs("nominalInterestRate"))){
            states.accruedInterest = 0.0;
        } else if(!CommonUtils.isNull(model.getAs("accruedInterest"))){
            states.accruedInterest = model.getAs("accruedInterest");
        } else{
            DayCountCalculator dayCounter = model.getAs("dayCountConvention");
            BusinessDayAdjuster timeAdjuster = model.getAs("businessDayConvention");
            List<LocalDateTime> ipSchedule = new ArrayList<>(ScheduleFactory.createSchedule(
                    model.getAs("cycleAnchorDateOfInterestPayment"),
                    model.getAs("maturityDate"),
                    model.getAs("cycleOfInterestPayment"),
                    model.getAs("endOfMonthConvention"),
                    true
            ));
            Collections.sort(ipSchedule);
            List<LocalDateTime> dateEarlierThanT0 = ipSchedule.stream().filter(time -> time.isBefore(states.statusDate)).collect(Collectors.toList());
            LocalDateTime tMinus = dateEarlierThanT0.get(dateEarlierThanT0.size() -1);
            states.accruedInterest = dayCounter.dayCountFraction(timeAdjuster.shiftCalcTime(tMinus), timeAdjuster.shiftCalcTime(states.statusDate))
                    * states.notionalPrincipal
                    * states.nominalInterestRate;
        }

        if(CommonUtils.isNull(model.getAs("feeRate"))){
            states.feeAccrued = 0.0;
        } else if(!CommonUtils.isNull(model.getAs("feeAccrued"))){
            states.feeAccrued = model.getAs("feeAccrued");
        }//TODO: implement last two possible initialization


        // return the initialized state space
        return states;
    }

}

code rust :
use std::error::Error;
use std::rc::Rc;
use crate::events::ContractEvent::ContractEvent;
use crate::events::EventFactory::EventFactory;
use crate::events::EventType::EventType;
use crate::externals::RiskFactorModel::RiskFactorModel;
use log::{debug, info, warn, error};

use crate::functions::pam::pof::{
    POF_FP_PAM::POF_FP_PAM,
    POF_IED_PAM::POF_IED_PAM,
    POF_IP_PAM::POF_IP_PAM,
    POF_IPCI_PAM::POF_IPCI_PAM,
    POF_MD_PAM::POF_MD_PAM,
    POF_PRD_PAM::POF_PRD_PAM,
    POF_RR_PAM::POF_RR_PAM,
    POF_SC_PAM::POF_SC_PAM,
    POF_TD_PAM::POF_TD_PAM
};

use crate::functions::pam::stf::{
STF_FP_PAM::STF_FP_PAM,
    STF_IED_PAM::STF_IED_PAM,
    STF_IP_PAM::STF_IP_PAM,
    STF_IPCI_PAM::STF_IPCI_PAM,
    STF_MD_PAM::STF_MD_PAM,
    STF_PRD_PAM::STF_PRD_PAM,
    STF_RR_PAM::STF_RR_PAM,
    STF_RRF_PAM::STF_RRF_PAM,
    STF_SC_PAM::STF_SC_PAM,
    STF_TD_PAM::STF_TD_PAM,
};

use crate::state_space::StateSpace::StateSpace;
use crate::types::isoDatetime::IsoDatetime;
use crate::time::ScheduleFactory::ScheduleFactory;
use crate::attributes::ContractModel::ContractModel;

/// Represents the Principal At Maturity payoff algorithm
pub struct PrincipalAtMaturity;

impl PrincipalAtMaturity {
    /// Compute next events within the period up to `to` date based on the contract model
    pub fn schedule(
        to: &IsoDatetime,
        model: &ContractModel,
    ) -> Result<Vec<ContractEvent>, Box<dyn Error>> {
        let mut events = Vec::new();

        // Initial exchange (IED)
        let e = EventFactory::create_event(
            model.initialExchangeDate,
            EventType::IED,
            model.currency.as_ref(),
            Some(Rc::new(POF_IED_PAM)),
            Some(Rc::new(STF_IED_PAM)),
            model.contractID.as_ref(),
        );
        events.push(e);

        // Principal redemption (MD)

        events.push(EventFactory::create_event(
            model.maturityDate.clone().map(|rc| (*rc).clone()),
            EventType::MD,
            model.currency.as_ref(),
            Some(Rc::new(POF_MD_PAM)),
            Some(Rc::new(STF_MD_PAM)),
            model.contractID.as_ref(),
        ));

        // Purchase (PRD)
        if model.purchaseDate.is_some() {
            events.push(EventFactory::create_event(
                model.purchaseDate,
                EventType::PRD,
                model.currency.as_ref(),
                Some(Rc::new(POF_PRD_PAM)),
                Some(Rc::new(STF_PRD_PAM)),
                model.contractID.as_ref(),
            ));
        }

        // Interest payment related events
        if model.nominalInterestRate.is_some()
            && (model.cycleOfInterestPayment.is_some() || model.cycleAnchorDateOfInterestPayment.is_some())
        {
            // Generate raw interest payment events (IP)
            let a = model.cycleAnchorDateOfInterestPayment.clone().unwrap().format("%Y-%m-%d").to_string();
            let b = model.maturityDate.clone().unwrap().format("%Y-%m-%d").to_string();
            debug!("La valeur de a est : {}", a);
            let z = &ScheduleFactory::create_schedule(
                model.cycleAnchorDateOfInterestPayment.clone(),
                model.maturityDate.clone().map(|rc| (*rc).clone()),
                model.cycleOfInterestPayment.clone(),
                model.endOfMonthConvention.unwrap(),
                true,
            );
            let zz = z.iter().map(|a| a.format("%Y-%m-%d").to_string()).collect::<Vec<String>>();
            let mut interest_events = EventFactory::create_events_with_convention(
                z,
                EventType::IP,
                model.currency.as_ref(),
                Some(Rc::new(POF_IP_PAM)),
                Some(Rc::new(STF_IP_PAM)),
                model.businessDayAdjuster.as_ref().unwrap(),
                model.contractID.as_ref(),
            );

            // Adapt if interest capitalization is set
            if model.capitalizationEndDate.is_some() {
                // Remove IP events at IPCED and add IPCI event instead
                let capitalization_end = EventFactory::create_event_with_convention(
                    model.capitalizationEndDate,
                    EventType::IPCI,
                    model.currency.as_ref(),
                    Some(Rc::new(POF_IPCI_PAM)),
                    Some(Rc::new(STF_IPCI_PAM)),
                    &model.businessDayAdjuster.as_ref().unwrap(),
                    model.contractID.as_ref(),
                );

                // Remove IP events that occur at capitalization end date
                interest_events.retain(|e| {
                    !(e.eventType == EventType::IP && e.eventTime == Some(capitalization_end.get_event_time()))
                });

                // Add capitalization end event
                interest_events.insert(capitalization_end.clone());
                let mut vec: Vec<_> = interest_events.clone().into_iter().collect();
                // Change events with time <= IPCED and cont_type IP to IPCI


                vec.iter_mut()
                    .filter(|e| e.eventType == EventType::IP &&
                        e.get_event_time() <= capitalization_end.get_event_time())
                    .for_each(|e| {
                        e.chg_eventType(EventType::IPCI);
                        e.set_f_pay_off(Some(Rc::new(POF_IPCI_PAM)));
                        e.set_f_state_trans(Some(Rc::new(STF_IPCI_PAM)));
                    });

                // for e in vec.iter_mut() {
                //     if e.get_eventType() == EventType::IP
                //         && e.get_event_time() <= capitalization_end.get_event_time()
                //     {
                //         e.chg_eventType(EventType::IPCI);
                //         e.set_f_pay_off(Some(Rc::new(POF_IPCI_PAM)));
                //         e.set_f_state_trans(Some(Rc::new(STF_IPCI_PAM)));
                //     }
                // }
                interest_events = vec.into_iter().collect();
            }

            events.extend(interest_events);
        }
        else if model.capitalizationEndDate.is_some() {
            // If no interest schedule set but capitalization end date, add single IPCI event
            events.push(EventFactory::create_event_with_convention(
                model.capitalizationEndDate,
                EventType::IPCI,
                model.currency.as_ref(),
                Some(Rc::new(POF_IPCI_PAM)),
                Some(Rc::new(STF_IPCI_PAM)),
                &model.businessDayAdjuster.clone().unwrap(),
                model.contractID.as_ref(),
            ));
        }

        // Rate reset events (RR)
        let mut rate_reset_events = EventFactory::create_events_with_convention(
            &ScheduleFactory::create_schedule(
                model.cycleAnchorDateOfRateReset.clone(),
                model.maturityDate.clone().map(|rc| (*rc).clone()),
                model.cycleOfRateReset.clone(),
                model.endOfMonthConvention.clone().unwrap(),
                false,
            ),
            EventType::RR,
            model.currency.as_ref(),
            Some(Rc::new(POF_RR_PAM)),
            Some(Rc::new(STF_RR_PAM)),
            &model.businessDayAdjuster.clone().unwrap(),
            model.contractID.as_ref(),
        );

        // Adapt fixed rate reset event
        if model.nextResetRate.is_some() {
            let status_event = EventFactory::create_event(
                model.statusDate,
                EventType::AD,
                model.currency.as_ref(),
                None,
                None,
                model.contractID.as_ref(),
            );
            let mut vec: Vec<_> = rate_reset_events.clone().into_iter().collect();
            vec.sort();
            let fixed_event = vec.iter_mut().filter(|e| e.compare_to(&status_event)  == 1 ).next();

            if let Some(fixed_event_val) = fixed_event {
                fixed_event_val.set_f_state_trans(Some(Rc::new(STF_RRF_PAM)));
                fixed_event_val.chg_eventType(EventType::RRF);
                rate_reset_events.insert(fixed_event_val.clone());
            }


        }

        // Add all rate reset events
        events.extend(rate_reset_events);

        // Fee payment events (FP), if specified
        if model.cycle_of_fee.is_some() {
            let fee_events = EventFactory::create_events_with_convention(
                &ScheduleFactory::create_schedule(
                    model.cycleAnchorDateOfFee,
                    model.maturityDate.clone().map(|rc| (*rc).clone()),
                    model.cycle_of_fee.clone(),
                    model.endOfMonthConvention.unwrap(),
                    true,
                ),
                EventType::FP,
                model.currency.as_ref(),
                Some(Rc::new(POF_FP_PAM)),
                Some(Rc::new(STF_FP_PAM)),
                &model.businessDayAdjuster.clone().unwrap(),
                model.contractID.as_ref(),
            );
            events.extend(fee_events);
        }

        // Scaling events (SC), if specified

        if model.scalingEffect.is_some() && (model.scalingEffect.clone().unwrap().to_string().contains('I') || model.scalingEffect.clone().unwrap().to_string().contains('N'))
        {
            let scaling_events = EventFactory::create_events_with_convention(
                &ScheduleFactory::create_schedule(
                    model.cycleAnchorDateOfScalingIndex,
                    model.maturityDate.clone().map(|rc| (*rc).clone()),
                    model.cycleOfScalingIndex.clone(),
                    model.endOfMonthConvention.unwrap(),
                    false,
                ),
                EventType::SC,
                model.currency.as_ref(),
                Some(Rc::new(POF_SC_PAM)),
                Some(Rc::new(STF_SC_PAM)),
                &model.businessDayAdjuster.clone().unwrap(),
                model.contractID.as_ref(),
            );
            events.extend(scaling_events);
        }

        // Termination event (TD)
        if model.terminationDate.is_some() {
            let termination = EventFactory::create_event(
                model.terminationDate,
                EventType::TD,
                model.currency.as_ref(),
                Some(Rc::new(POF_TD_PAM)),
                Some(Rc::new(STF_TD_PAM)),
                model.contractID.as_ref(),
            );

            // Remove all events occurring after termination date
            events.retain(|e| e <= &termination);
            events.push(termination);
        }

        // Remove all pre-status date events
        let status_date = model.statusDate;
        let status_event = EventFactory::create_event(
            status_date,
            EventType::AD,
            model.currency.as_ref(),
            None,
            None,
            model.contractID.as_ref(),
        );
        events.retain(|e| e >= &status_event);

        // Remove all events after the `to` date
        let to_event = EventFactory::create_event(
            Some(to.clone()),
            EventType::AD,
            model.currency.as_ref(),
            None,
            None,
            model.contractID.as_ref(),
        );
        events.retain(|e| e <= &to_event);

        // Sort events according to their time of occurrence
        events.sort();

        Ok(events.clone())
    }

    /// Apply a set of events to the current state of a contract and return the post-event states
    pub fn apply(
        events: Vec<ContractEvent>,
        model: &ContractModel,
        observer: &RiskFactorModel,
    ) -> Vec<ContractEvent> {
        // Initialize state space per status date
        let mut states = Self::init_StateSpace(model);
        let mut events = events.clone();
        // Sort events according to their time sequence
        events.sort();
        // Apply events according to their time sequence to current state
        for event in events.iter_mut() {
            event.eval(
                &mut states,
                model,
                observer,
                &model.dayCountConvention.clone().unwrap(),
                &model.businessDayAdjuster.clone().unwrap(),
            );
        }

        // Remove pre-purchase events if purchase date is set
        if model.purchaseDate.is_some() {
            let purchase_date = model.purchaseDate;
            let purchase_event = EventFactory::create_event(
                purchase_date,
                EventType::PRD,
                model.currency.as_ref(),
                None,
                None,
                model.contractID.as_ref(),
            );
            events.retain(|e| {
                e.get_eventType() == EventType::AD || e >= &purchase_event
            });
        }

        // Return evaluated events
        events.clone()
    }

    /// Initialize the StateSpace according to the model attributes
    fn init_StateSpace(
        model: &ContractModel,
    ) -> StateSpace {
        let mut states = StateSpace::default();

        states.notionalScalingMultiplier = model.notionalScalingMultiplier;
        states.interestScalingMultiplier = model.interestScalingMultiplier;
        states.contractPerformance = model.contractPerformance;
        states.statusDate = model.statusDate;

        let initial_exchange_date: IsoDatetime = model.initialExchangeDate.unwrap();
        if initial_exchange_date > states.statusDate.unwrap() {
            states.notionalPrincipal = Some(0.0);
            states.nominalInterestRate = Some(0.0);
        } else {

            let role_sign = model.contractRole.as_ref().map_or(1.0, |a| a.role_sign());
            states.notionalPrincipal = Some(role_sign * model.notional_principal.unwrap());
            states.nominalInterestRate = model.nominalInterestRate;
        }

        // Initialize accrued interest
        if model.nominalInterestRate.is_none() {
            states.accruedInterest =  Some(0.0);
        } else if model.accruedInterest.is_some() {
            states.accruedInterest = model.accruedInterest;
        } else {
            // GERER CE CAS : Il y a UNE ERREUR
            let day_counter = model.dayCountConvention.as_ref().unwrap();
            let time_adjuster = model.businessDayAdjuster.as_ref().unwrap();


            let mut ip_schedule: Vec<IsoDatetime> = ScheduleFactory::create_schedule(
                model.cycleAnchorDateOfInterestPayment,
                model.maturityDate.clone().map(|rc| (*rc).clone()),
                model.cycleOfInterestPayment.clone(),
                model.endOfMonthConvention.unwrap(),
                true,
            ).into_iter().collect();

            ip_schedule.sort();

            let date_earlier_than_t0: Vec<&IsoDatetime> = ip_schedule
                .iter()
                .filter(|&&date| date < states.statusDate.unwrap())
                .collect();

            let t_minus = date_earlier_than_t0.last();
            println!("ok");
            states.accruedInterest = Some(day_counter.day_count_fraction(time_adjuster.shift_bd(t_minus.unwrap()),
                                                                    time_adjuster.shift_bd(&states.statusDate.unwrap()))
                * states.notionalPrincipal.unwrap()
                * states.nominalInterestRate.unwrap());

        }

        if model.fee_rate.is_none() {
            states.feeAccrued = Some(0.0);
        } else if model.feeAccrued.is_some() {
            states.feeAccrued = model.feeAccrued;
        }
        // TODO: Implement last two possible initializations if needed

        states
    }
}

inspire toi pour faire pareil avec ce code java :
/*
 * Copyright (C) 2016 - present by ACTUS Financial Research Foundation
 *
 * Please see distribution for license.
 */
package org.actus.contracts;

import java.time.LocalDateTime;
import java.time.Period;
import java.util.*;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.actus.AttributeConversionException;
import org.actus.attributes.ContractModel;
import org.actus.attributes.ContractModelProvider;
import org.actus.conventions.businessday.BusinessDayAdjuster;
import org.actus.conventions.contractrole.ContractRoleConvention;
import org.actus.conventions.daycount.DayCountCalculator;
import org.actus.events.ContractEvent;
import org.actus.events.EventFactory;
import org.actus.externals.RiskFactorModelProvider;

import org.actus.functions.PayOffFunction;
import org.actus.functions.StateTransitionFunction;
import org.actus.functions.lam.POF_IPCB_LAM;
import org.actus.functions.lam.POF_IP_LAM;
import org.actus.functions.lam.POF_PRD_LAM;
import org.actus.functions.lam.POF_TD_LAM;
import org.actus.functions.lam.STF_FP_LAM;
import org.actus.functions.lam.STF_IED_LAM;
import org.actus.functions.lam.STF_IPCB_LAM;
import org.actus.functions.lam.STF_IPCI2_LAM;
import org.actus.functions.lam.STF_IPCI_LAM;
import org.actus.functions.lam.STF_PRD_LAM;
import org.actus.functions.lam.STF_SC_LAM;
import org.actus.functions.lax.POF_PI_LAX;
import org.actus.functions.lax.POF_PR_LAX;
import org.actus.functions.lax.STF_PI_LAX;
import org.actus.functions.lax.STF_PI_LAX2;
import org.actus.functions.lax.STF_PR_LAX;
import org.actus.functions.lax.STF_PR_LAX2;
import org.actus.functions.lax.STF_RRF_LAX;
import org.actus.functions.lax.STF_RRY_LAM;
import org.actus.functions.lax.STF_RR_LAX;
import org.actus.functions.pam.POF_AD_PAM;
import org.actus.functions.pam.POF_FP_PAM;
import org.actus.functions.pam.POF_IED_PAM;
import org.actus.functions.pam.POF_IPCI_PAM;
import org.actus.functions.pam.POF_RR_PAM;
import org.actus.functions.pam.POF_SC_PAM;
import org.actus.functions.pam.STF_AD_PAM;
import org.actus.functions.pam.STF_IP_PAM;
import org.actus.functions.pam.STF_TD_PAM;
import org.actus.functions.lam.STF_MD_LAM;
import org.actus.functions.pam.POF_MD_PAM;

import org.actus.states.StateSpace;
import org.actus.time.ScheduleFactory;
import org.actus.types.EventType;
import org.actus.types.InterestCalculationBase;
import org.actus.util.CommonUtils;
import org.actus.util.CycleUtils;

/**
 * Represents the Exotic Linear Amortizer payoff algorithm
 *
 * @see <a href="https://www.actusfrf.org"></a>
 */
public final class ExoticLinearAmortizer {

	// compute next n non-contingent events
	public static ArrayList<ContractEvent> schedule(LocalDateTime to, ContractModelProvider model)
			throws AttributeConversionException {
		ArrayList<ContractEvent> events = new ArrayList<ContractEvent>();

		// determine maturity of the contract
		LocalDateTime maturity = Objects.isNull(to) ? maturity(model) : to;

		// initial exchange
		events.add(EventFactory.createEvent(
				model.getAs("initialExchangeDate"),
				EventType.IED,
				model.getAs("currency"),
				new POF_IED_PAM(),
				new STF_IED_LAM(),
				model.getAs("contractID"))
		);

		// purchase event
		if (!CommonUtils.isNull(model.getAs("purchaseDate"))) {
			events.add(EventFactory.createEvent(
					model.getAs("purchaseDate"),
					EventType.PRD,
					model.getAs("currency"),
					new POF_PRD_LAM(),
					new STF_PRD_LAM(),
					model.getAs("contractID"))
			);
		}

		// create principal redemption schedule
		if (!CommonUtils.isNull(model.getAs("arrayCycleAnchorDateOfPrincipalRedemption"))) {

			// parse array-type attributes
			LocalDateTime[] prAnchor = Arrays.stream(model.getAs("arrayCycleAnchorDateOfPrincipalRedemption").toString().replaceAll("\\[", "").replaceAll("]","").split(","))
					.map(d -> LocalDateTime.parse(d.trim())).toArray(LocalDateTime[]::new);
			String[] prCycle = {};
			if (!CommonUtils.isNull(model.getAs("arrayCycleOfPrincipalRedemption"))) {
				prCycle = Arrays.stream(model.getAs("arrayCycleOfPrincipalRedemption").toString().replaceAll("\\[", "").replaceAll("]","").split(",")).map(String::trim).toArray(String[]::new);
			}
			String[] prPayment = Arrays.stream(model.getAs("arrayNextPrincipalRedemptionPayment").toString().replaceAll("\\[", "").replaceAll("]","").split(",")).map(d -> d).toArray(String[]::new);
			String[] prIncDec = Arrays.stream(model.getAs("arrayIncreaseDecrease").toString().replaceAll("\\[", "").replaceAll("]","").split(","))
					.map(String::trim).toArray(String[]::new);

			// create array-type schedule with respective increase/decrease features
			EventType prType;
			StateTransitionFunction prStf;
			PayOffFunction prPof;
			int prLen = prAnchor.length + 1;
			LocalDateTime[] prLocalDate = new LocalDateTime[prLen];
			prLocalDate[prLen - 1] = maturity;
			for (int i = 0; i < prAnchor.length; i++) {
				prLocalDate[i] = prAnchor[i];
			}
			for (int i = 0; i < prAnchor.length; i++) {

				if (prIncDec[i].trim().equalsIgnoreCase("DEC")) {
					prType = EventType.PR;
					prStf = (!CommonUtils.isNull(model.getAs("interestCalculationBase"))
							&& model.getAs("interestCalculationBase").equals(InterestCalculationBase.NTL)) ?
							new STF_PR_LAX(Double.parseDouble(prPayment[i])) : new STF_PR_LAX2(Double.parseDouble(prPayment[i]));
					prPof = new POF_PR_LAX(Double.parseDouble(prPayment[i]));
				} else {
					prType = EventType.PI;
					prStf = (!CommonUtils.isNull(model.getAs("interestCalculationBase"))
							&& model.getAs("interestCalculationBase").equals(InterestCalculationBase.NTL)) ?
							new STF_PI_LAX(Double.parseDouble(prPayment[i])) : new STF_PI_LAX2(Double.parseDouble(prPayment[i]));
					prPof = new POF_PI_LAX(Double.parseDouble(prPayment[i]));
				}
				events.addAll(EventFactory.createEvents(
						ScheduleFactory.createSchedule(
								prLocalDate[i],
								prLocalDate[i + 1],
								(prCycle.length>0)? prCycle[i] : null, model.getAs("endOfMonthConvention"),
								false
						),
						prType,
						model.getAs("currency"),
						prPof,
						prStf,
						model.getAs("businessDayConvention"),
						model.getAs("contractID"))
				);
			}
		}

		// add maturity event
		events.add(EventFactory.createEvent(
	        maturity,
            EventType.MD,
            model.getAs("currency"),
            new POF_MD_PAM(),
            new STF_MD_LAM(),
            model.getAs("businessDayConvention"),
            model.getAs("contractID"))
        );

		// create interest payment schedule
		if (!CommonUtils.isNull(model.getAs("arrayCycleAnchorDateOfInterestPayment"))) {

			// parse array-type attributes
			LocalDateTime[] ipAnchor = Arrays
					.asList(model.getAs("arrayCycleAnchorDateOfInterestPayment").toString().replaceAll("\\[", "").replaceAll("\\]","").split(",")).stream()
					.map(d -> LocalDateTime.parse(d.trim())).toArray(LocalDateTime[]::new);
			String[] ipCycle = {};
			if (!CommonUtils.isNull(model.getAs("arrayCycleOfInterestPayment"))) {
				ipCycle = Arrays.asList(model.getAs("arrayCycleOfInterestPayment").toString().replaceAll("\\[", "").replaceAll("\\]","").split(","))
					.stream().map(d -> d.trim()).toArray(String[]::new);
			}

			// raw interest payment events
			Set<ContractEvent> interestEvents = EventFactory.createEvents(
					ScheduleFactory.createArraySchedule(
							ipAnchor,
							maturity,
							(ipCycle.length>0)? ipCycle : null,
							model.getAs("endOfMonthConvention")
					),
					EventType.IP,
					model.getAs("currency"),
					new POF_IP_LAM(),
					new STF_IP_PAM(),
					model.getAs("businessDayConvention"),
					model.getAs("contractID")
			);

			// adapt if interest capitalization set
			if (!CommonUtils.isNull(model.getAs("capitalizationEndDate"))) {

				// define ipci state-transition function
				StateTransitionFunction stf_ipci = (!CommonUtils.isNull(model.getAs("interestCalculationBase"))
						&& model.getAs("interestCalculationBase").equals(InterestCalculationBase.NTL)) ? new STF_IPCI_LAM() : new STF_IPCI2_LAM();

				// for all events with time <= IPCED && type == "IP" do
				// change type to IPCI and payoff/state-trans functions
				ContractEvent capitalizationEnd = EventFactory.createEvent(
						model.getAs("capitalizationEndDate"),
						EventType.IPCI,
						model.getAs("currency"),
						new POF_IPCI_PAM(),
						stf_ipci,
						model.getAs("businessDayConvention"),
						model.getAs("contractID")
				);
				interestEvents.forEach(e -> {
					if (e.eventType().equals(EventType.IP) && e.compareTo(capitalizationEnd) == -1) {
						e.eventType(EventType.IPCI);
						e.fPayOff(new POF_IPCI_PAM());
						e.fStateTrans(stf_ipci);
					}
				});

				// also, remove any IP event exactly at IPCED and replace with an IPCI event
				interestEvents.remove(EventFactory.createEvent(model.getAs("capitalizationEndDate"),
						EventType.IP, model.getAs("currency"), new POF_AD_PAM(), new STF_AD_PAM(),
						model.getAs("businessDayConvention"), model.getAs("contractID")));
			}
			events.addAll(interestEvents);
		} else

			// if no interest schedule defined, still add a capitalization event
			if (!CommonUtils.isNull(model.getAs("capitalizationEndDate"))) {

				// define ipci state-transition function
				StateTransitionFunction stf_ipci = (!CommonUtils.isNull(model.getAs("interestCalculationBase"))
						&& model.getAs("interestCalculationBase").equals(InterestCalculationBase.NTL)) ? new STF_IPCI_LAM() : new STF_IPCI2_LAM();

				// add single event
				events.add(EventFactory.createEvent(
						model.getAs("capitalizationEndDate"),
						EventType.IPCI,
						model.getAs("currency"),
						new POF_IPCI_PAM(),
						stf_ipci,
						model.getAs("businessDayConvention"),
						model.getAs("contractID"))
				);
		}

		// create rate reset schedule
		if (!CommonUtils.isNull(model.getAs("arrayCycleAnchorDateOfRateReset"))) {

			// parse array-type attributes
			LocalDateTime[] rrAnchor = Arrays
					.asList(model.getAs("arrayCycleAnchorDateOfRateReset").toString().replaceAll("\\[", "").replaceAll("\\]","").split(",")).stream()
					.map(d -> LocalDateTime.parse(d.trim())).toArray(LocalDateTime[]::new);
			String[] rrCycle = {};
			if (!CommonUtils.isNull(model.getAs("arrayCycleOfRateReset"))) {
				rrCycle = Arrays.asList(model.getAs("arrayCycleOfRateReset").toString().replaceAll("\\[", "").replaceAll("\\]","").split(","))
					.stream().map(d -> d.trim()).toArray(String[]::new);
			}
			String[] rrRate = Arrays.asList(model.getAs("arrayRate").toString().replaceAll("\\[", "").replaceAll("\\]","").split(",")).stream().map(d -> d.trim())
					.toArray(String[]::new);
			String[] rrFidedVar = Arrays.asList(model.getAs("arrayFixedVariable").toString().replaceAll("\\[", "").replaceAll("\\]","").split(",")).stream()
					.map(d -> d.trim()).toArray(String[]::new);

			// create array-type schedule with fix/var features
			EventType rrType;
			StateTransitionFunction rrStf;
			Set<ContractEvent> rateResetEvents = null;
			int rrLen = rrAnchor.length + 1;
			LocalDateTime rrLocalDate[] = new LocalDateTime[rrLen];
			rrLocalDate[rrLen - 1] = maturity;
			for (int i = 0; i < rrAnchor.length; i++) {
				rrLocalDate[i] = rrAnchor[i];
			}
			for (int i = 0; i < rrAnchor.length; i++) {
				if (rrFidedVar[i].trim().equalsIgnoreCase("FIX")) {
					rrType = EventType.RRF;
					rrStf = new STF_RRF_LAX(Double.parseDouble(rrRate[i]));
				} else {
					rrType = EventType.RR;
					rrStf = new STF_RR_LAX(Double.parseDouble(rrRate[i]));
				}
				rateResetEvents = EventFactory.createEvents(
						ScheduleFactory.createSchedule(
								rrLocalDate[i],
								rrLocalDate[i + 1],
								(rrCycle.length>0)? rrCycle[i] : null,
								model.getAs("endOfMonthConvention"),
								false
						),
						rrType,
						model.getAs("currency"),
						new POF_RR_PAM(),
						rrStf,
						model.getAs("businessDayConvention"),
						model.getAs("contractID")
				);
				events.addAll(rateResetEvents);
			}

			// adjust for already fixed reset rates
			if (!CommonUtils.isNull(model.getAs("nextResetRate"))) {
				rateResetEvents.stream().sorted()
						.filter(e -> e.compareTo(EventFactory.createEvent(model.getAs("statusDate"),
								EventType.AD, model.getAs("currency"), null, null, model.getAs("contractID"))) == 1)
						.findFirst().get().fStateTrans(new STF_RRY_LAM());
				events.addAll(rateResetEvents);
			}
		}

		// fee schedule
		if (!CommonUtils.isNull(model.getAs("cycleOfFee"))) {
			events.addAll(EventFactory.createEvents(
					ScheduleFactory.createSchedule(
							model.getAs("cycleAnchorDateOfFee"),
							maturity,
							model.getAs("cycleOfFee"),
							model.getAs("endOfMonthConvention")
					),
					EventType.FP,
					model.getAs("currency"),
					new POF_FP_PAM(),
					new STF_FP_LAM(),
					model.getAs("businessDayConvention"),
					model.getAs("contractID"))
			);
		}

		// scaling (if specified)
		if (!CommonUtils.isNull(model.getAs("scalingEffect")) && (model.getAs("scalingEffect").toString().contains("I")
				|| model.getAs("scalingEffect").toString().contains("N"))) {
			events.addAll(EventFactory.createEvents(
					ScheduleFactory.createSchedule(
							model.getAs("cycleAnchorDateOfScalingIndex"),
							maturity,
							model.getAs("cycleOfScalingIndex"),
							model.getAs("endOfMonthConvention"),
							false
					),
					EventType.SC,
					model.getAs("currency"),
					new POF_SC_PAM(),
					new STF_SC_LAM(),
					model.getAs("businessDayConvention"),
					model.getAs("contractID"))
			);
		}

		// interest calculation base (if specified)
		if (!CommonUtils.isNull(model.getAs("interestCalculationBase"))
				&& model.getAs("interestCalculationBase").equals(InterestCalculationBase.NTL)) {
			events.addAll(EventFactory.createEvents(
					ScheduleFactory.createSchedule(
							model.getAs("cycleAnchorDateOfInterestCalculationBase"),
							maturity,
							model.getAs("cycleOfInterestCalculationBase"),
							model.getAs("endOfMonthConvention"),
							false
					),
					EventType.IPCB,
					model.getAs("currency"),
					new POF_IPCB_LAM(),
					new STF_IPCB_LAM(),
					model.getAs("businessDayConvention"),
					model.getAs("contractID"))
			);
		}

		// termination
		if (!CommonUtils.isNull(model.getAs("terminationDate"))) {
			ContractEvent termination = EventFactory.createEvent(
					model.getAs("terminationDate"),
					EventType.TD,
					model.getAs("currency"),
					new POF_TD_LAM(),
					new STF_TD_PAM(),
					model.getAs("contractID")
			);
			events.removeIf(e -> e.compareTo(termination) == 1); // remove all post-termination events
			events.add(termination);
		}

		// remove all pre-status date events
		events.removeIf(e -> e.compareTo(EventFactory.createEvent(model.getAs("statusDate"), EventType.AD,model.getAs("currency"), null, null, model.getAs("contractID"))) == -1);

		// remove all post to-date events
        events.removeIf(e -> e.compareTo(EventFactory.createEvent(maturity, EventType.AD, model.getAs("currency"), null, null, model.getAs("contractID"))) == 1);

		// sort the events in the payoff-list according to their time of occurence
		Collections.sort(events);

		return events;
	}

	// apply a set of events to the current state of a contract and return the post
	// events state
	public static ArrayList<ContractEvent> apply(ArrayList<ContractEvent> events, ContractModelProvider model,
			RiskFactorModelProvider observer) throws AttributeConversionException {

        // initialize state space per status date
        StateSpace states = initStateSpace(model,maturity(model));

        // sort the events according to their time sequence
        Collections.sort(events);

        // apply events according to their time sequence to current state
		ListIterator<ContractEvent> eventIterator = events.listIterator();
        //while (( states.statusDate.isBefore(initialExchangeDate) || states.notionalPrincipal != 0.0) && eventIterator.hasNext()) {
        while (eventIterator.hasNext()) {
                ((ContractEvent) eventIterator.next()).eval(states, model, observer, model.getAs("dayCountConvention"),
                    model.getAs("businessDayConvention"));
        }

        // remove pre-purchase events if purchase date set
        if(!CommonUtils.isNull(model.getAs("purchaseDate"))) {
            events.removeIf(e -> !e.eventType().equals(EventType.AD) && e.compareTo(EventFactory.createEvent(model.getAs("purchaseDate"), EventType.PRD, model.getAs("currency"), null, null, model.getAs("contractID"))) == -1);
		}

        // return evaluated events
        return events;
	}

	private static LocalDateTime maturity(ContractModelProvider model) {

		// determine maturity of the contract
		LocalDateTime maturity = model.getAs("maturityDate");

		if(CommonUtils.isNull(maturity)) {
			DayCountCalculator dayCounter = model.getAs("dayCountConvention");
			BusinessDayAdjuster timeAdjuster = model.getAs("businessDayConvention");
			double notionalPrincipal = model.getAs("notionalPrincipal");
			ArrayList<LocalDateTime> prAnchor = Arrays.stream(model.getAs("arrayCycleAnchorDateOfPrincipalRedemption").toString().replaceAll("\\[", "").replaceAll("]", "").split(","))
					.map(s -> {
						s = s.trim();
						return LocalDateTime.parse(s);
					}).collect(Collectors.toCollection(ArrayList::new));

			Integer[] prIncDec = Arrays.stream(model.getAs("arrayIncreaseDecrease").toString().replaceAll("\\[", "").replaceAll("]", "").trim().split(","))
					.map(d -> {
						if (d.equals("INC")) {
							return 1;
						} else {
							return -1;
						}
					}).toArray(Integer[]::new);

			Double[] prPayment = Arrays.stream(model.getAs("arrayNextPrincipalRedemptionPayment").toString().replaceAll("\\[", "").replaceAll("]", "").trim().split(",")).map(Double::parseDouble).toArray(Double[]::new);

			if (Objects.isNull(model.getAs("arrayCycleOfPrincipalRedemption"))) {
				maturity = prAnchor.get(prAnchor.size()-1);
			} else {
				String[] prCycle = Arrays.stream(model.getAs("arrayCycleOfPrincipalRedemption").toString().replaceAll("\\[", "").replaceAll("]", "").split(",")).map(String::trim).toArray(String[]::new);
				LocalDateTime t = model.getAs("statusDate");
				if (prCycle.length > 1) {
					double sum = 0.0;
					int index = 0;
					int noOfPrEvents = 0;
					Set<LocalDateTime> prSchedule;
					do {
						prSchedule = ScheduleFactory.createSchedule(prAnchor.get(index), prAnchor.get(index + 1), prCycle[index], model.getAs("endOfMonthConvention"), false);
						noOfPrEvents = (prSchedule.size() * prPayment[index] * prIncDec[index]) + notionalPrincipal + sum >= 0 ? prSchedule.size() : (int) ((notionalPrincipal + sum) / prPayment[index]);
						sum += noOfPrEvents * prIncDec[index] * prPayment[index];
						//ARPRCL, ARPRANX and ARINDEC must be the same size
						if (prAnchor.size()-2 == index) {
							noOfPrEvents = Math.abs((int) Math.ceil((sum + notionalPrincipal) / prPayment[index+1]));
							t = prAnchor.get(index+1);
							for (int i = 0; i < noOfPrEvents-1; i++) {
								t = t.plus(CycleUtils.parsePeriod(prCycle[index+1]));
							}
							sum += noOfPrEvents * prIncDec[index+1] * prPayment[index+1];
						} else {
							index++;
							for (int i = 0; i < noOfPrEvents; i++) {
								t = t.plus(CycleUtils.parsePeriod(prCycle[index - 1]));
							}
						}
					} while ((sum + notionalPrincipal) > 0);
				} else {
					int noOfPrEvents = (int) Math.ceil(notionalPrincipal / prPayment[0]);
					t = prAnchor.get(0);
					for (int i = 0; i < noOfPrEvents-1; i++) {
						t = t.plus(CycleUtils.parsePeriod(prCycle[0]));
					}
				}
				maturity = timeAdjuster.shiftEventTime(t);
			}
		}
		return maturity;
	}

	private static StateSpace initStateSpace(ContractModelProvider model, LocalDateTime maturity)
			throws AttributeConversionException {
		StateSpace states = new StateSpace();

		// general states to be initialized
		states.statusDate = model.getAs("statusDate");
		states.notionalScalingMultiplier = 1;
		states.interestScalingMultiplier = 1;

		if(model.<LocalDateTime>getAs("initialExchangeDate").isAfter(model.getAs("statusDate"))){
            states.notionalPrincipal = 0.0;
            states.nominalInterestRate = 0.0;
            states.interestCalculationBaseAmount = 0.0;
        }else{
			states.notionalPrincipal = ContractRoleConvention.roleSign(model.getAs("contractRole"))
					* model.<Double>getAs("notionalPrincipal");
			states.nominalInterestRate = model.getAs("nominalInterestRate");
			states.accruedInterest = ContractRoleConvention.roleSign(model.getAs("contractRole"))
					* model.<Double>getAs("accruedInterest");
			states.feeAccrued = model.getAs("feeAccrued");
			if(InterestCalculationBase.NT.equals(model.getAs("interestCalculationBase"))){
                states.interestCalculationBaseAmount = states.notionalPrincipal; // contractRole applied at notionalPrincipal init
            }else{
                states.interestCalculationBaseAmount = ContractRoleConvention.roleSign(model.getAs("contractRole")) * model.<Double>getAs("interestCalculationBaseAmount");
            }
		}
		return states;
	}

}
