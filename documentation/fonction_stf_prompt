J'ai converti ce code java en rust de la facon suivante :
le code java :
/*
 * Copyright (C) 2016 - present by ACTUS Financial Research Foundation
 *
 * Please see distribution for license.
 */
package org.actus.functions.pam;

import org.actus.functions.StateTransitionFunction;
import org.actus.states.StateSpace;
import org.actus.attributes.ContractModelProvider;
import org.actus.externals.RiskFactorModelProvider;
import org.actus.conventions.daycount.DayCountCalculator;
import org.actus.conventions.businessday.BusinessDayAdjuster;
import org.actus.types.ContractPerformance;

import java.time.LocalDateTime;

public final class STF_CD_PAM implements StateTransitionFunction {

    @Override
    public StateSpace eval(LocalDateTime time, StateSpace states,
    ContractModelProvider model, RiskFactorModelProvider riskFactorModel, DayCountCalculator dayCounter, BusinessDayAdjuster timeAdjuster) {// update state space
        double timeFromLastEvent = dayCounter.dayCountFraction(timeAdjuster.shiftCalcTime(states.status_date), timeAdjuster.shiftCalcTime(time));
        states.accrued_interest += states.nominal_interest_rate * states.notional_principal * timeFromLastEvent;
        states.fee_accrued += model.<Double>getAs("feeRate") * states.notional_principal * timeFromLastEvent;
        states.contract_performance = ContractPerformance.DF;
        states.status_date = time;

        // return post-event-states
        return StateSpace.copyStateSpace(states);
    }

}

le code rust :
use crate::attributes::ContractModel::ContractModel;
use crate::externals::RiskFactorModel::RiskFactorModel;
use crate::state_space::StateSpace::StateSpace;
use crate::terms::grp_counterparty::ContractPerformance::ContractPerformance;
use crate::terms::grp_calendar::BusinessDayAdjuster::BusinessDayAdjuster;
use crate::terms::grp_interest::DayCountConvention::DayCountConvention;
use crate::traits::TraitStateTransitionFunction::TraitStateTransitionFunction;
use crate::types::isoDatetime::IsoDatetime;

#[allow(non_camel_case_types)]
pub struct STF_CD_PAM;

impl TraitStateTransitionFunction for STF_CD_PAM {
    fn eval(
        &self,
        time: &IsoDatetime,
        states: &mut StateSpace,
        model: &ContractModel,
        risk_factor_model: &RiskFactorModel,
        day_counter: &DayCountConvention,
        time_adjuster: &BusinessDayAdjuster,
    ) {

        let status_date = states.status_date.expect("statusDate should always be Some");
        let nominal_interest_rate = states.nominal_interest_rate.expect("nominalInterestRate should always be Some");
        let notional_principal = states.notional_principal.expect("notionalPrincipal should always be Some");

        let time_from_last_event = day_counter.day_count_fraction(time_adjuster.shift_sc(&status_date),
                                                                  time_adjuster.shift_sc(time));

        states.accrued_interest = states.accrued_interest.map(|mut accrued_interest| {
            accrued_interest += nominal_interest_rate * notional_principal * time_from_last_event;
            accrued_interest
        });

        states.fee_accrued = states.fee_accrued.map(|mut fee_accrued| {
            let fee_rate = model.fee_rate.unwrap_or(0.0);
            fee_accrued += fee_rate * notional_principal * time_from_last_event;
            fee_accrued
        });


        states.contract_performance = Some(ContractPerformance::new_DF());
        states.status_date = Some(*time);

    }
}
peux tu convertir le code suivant en gardant les regles de la conversion deduite des 2 codes precedents (styles, declaration des variables au debut ect...)
si tu vois quelque chose lie a settlement_currency_fx_rate ou risk_factor_model, met 1.0 a la place je limplementerai plus tard
/*
 * Copyright (C) 2016 - present by ACTUS Financial Research Foundation
 *
 * Please see distribution for license.
 */
package org.actus.functions.ump;

import org.actus.attributes.ContractModelProvider;
import org.actus.conventions.businessday.BusinessDayAdjuster;
import org.actus.conventions.contractrole.ContractRoleConvention;
import org.actus.conventions.daycount.DayCountCalculator;
import org.actus.externals.RiskFactorModelProvider;
import org.actus.functions.StateTransitionFunction;
import org.actus.states.StateSpace;
import org.actus.types.ContractRole;

import java.time.LocalDateTime;

public final class STF_PR_UMP implements StateTransitionFunction {
    double payoff=0.0;

    public STF_PR_UMP(double eventPayoff) {
        payoff=eventPayoff;
    }

    @Override
    public StateSpace eval(LocalDateTime time, StateSpace states,
    ContractModelProvider model, RiskFactorModelProvider riskFactorModel, DayCountCalculator dayCounter, BusinessDayAdjuster timeAdjuster) {
        // update state space
        double timeFromLastEvent = dayCounter.dayCountFraction(timeAdjuster.shiftCalcTime(states.status_date), timeAdjuster.shiftCalcTime(time));
        states.accrued_interest += states.nominal_interest_rate * states.notional_principal * timeFromLastEvent;
        states.notional_principal -= ContractRoleConvention.roleSign(model.getAs("contractRole"))*payoff;
        states.fee_accrued += model.<Double>getAs("feeRate") * states.notional_principal * timeFromLastEvent;
        states.status_date = time;

        // return post-event-states
        return StateSpace.copyStateSpace(states);
    }

}
